results[["ks_5"]] <- CFmeansForDecileBinsRF(fault_binerrs_ks_5_treat_df, "Y", "ks_5")
fault_binerrs_t_7_treat_df <- data.frame(Y=fault_binerrs_all$Y, t_7=fault_binerrs_all$t_7, t_5=fault_binerrs_all$t_5, t_6=fault_binerrs_all$t_6)
results[["t_7"]] <- CFmeansForDecileBinsRF(fault_binerrs_t_7_treat_df, "Y", "t_7")
fault_binerrs_ks_6_treat_df <- data.frame(Y=fault_binerrs_all$Y, ks_6=fault_binerrs_all$ks_6, ks_5=fault_binerrs_all$ks_5)
results[["ks_6"]] <- CFmeansForDecileBinsRF(fault_binerrs_ks_6_treat_df, "Y", "ks_6")
fault_binerrs_ks_3_treat_df <- data.frame(Y=fault_binerrs_all$Y, ks_3=fault_binerrs_all$ks_3, ks_2=fault_binerrs_all$ks_2)
results[["ks_3"]] <- CFmeansForDecileBinsRF(fault_binerrs_ks_3_treat_df, "Y", "ks_3")
fault_binerrs_t_9_treat_df <- data.frame(Y=fault_binerrs_all$Y, t_9=fault_binerrs_all$t_9, t_9=fault_binerrs_all$t_9, t_10=fault_binerrs_all$t_10)
results[["t_9"]] <- CFmeansForDecileBinsRF(fault_binerrs_t_9_treat_df, "Y", "t_9")
fault_binerrs_ks_4_treat_df <- data.frame(Y=fault_binerrs_all$Y, ks_4=fault_binerrs_all$ks_4, ks_4=fault_binerrs_all$ks_4, ks_7=fault_binerrs_all$ks_7)
results[["ks_4"]] <- CFmeansForDecileBinsRF(fault_binerrs_ks_4_treat_df, "Y", "ks_4")
fault_binerrs_k_60_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_60=fault_binerrs_all$k_60, k_59=fault_binerrs_all$k_59)
results[["k_60"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_60_treat_df, "Y", "k_60")
fault_binerrs_k_61_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_61=fault_binerrs_all$k_61, k_61=fault_binerrs_all$k_61, k_63=fault_binerrs_all$k_63)
results[["k_61"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_61_treat_df, "Y", "k_61")
fault_binerrs_k_97_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_97=fault_binerrs_all$k_97, k_97=fault_binerrs_all$k_97, k_102=fault_binerrs_all$k_102)
results[["k_97"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_97_treat_df, "Y", "k_97")
fault_binerrs_k_98_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_98=fault_binerrs_all$k_98)
results[["k_98"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_98_treat_df, "Y", "k_98")
fault_binerrs_k_95_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_95=fault_binerrs_all$k_95, k_93=fault_binerrs_all$k_93, k_94=fault_binerrs_all$k_94)
results[["k_95"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_95_treat_df, "Y", "k_95")
fault_binerrs_k_96_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_96=fault_binerrs_all$k_96, k_88=fault_binerrs_all$k_88)
results[["k_96"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_96_treat_df, "Y", "k_96")
fault_binerrs_k_99_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_99=fault_binerrs_all$k_99, k_98=fault_binerrs_all$k_98)
results[["k_99"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_99_treat_df, "Y", "k_99")
fault_binerrs_c_1_treat_df <- data.frame(Y=fault_binerrs_all$Y, c_1=fault_binerrs_all$c_1, c_0=fault_binerrs_all$c_0)
results[["c_1"]] <- CFmeansForDecileBinsRF(fault_binerrs_c_1_treat_df, "Y", "c_1")
fault_binerrs_c_0_treat_df <- data.frame(Y=fault_binerrs_all$Y, c_0=fault_binerrs_all$c_0, sp_0=fault_binerrs_all$sp_0, epm1_0=fault_binerrs_all$epm1_0, sp_0=fault_binerrs_all$sp_0, epm1_0=fault_binerrs_all$epm1_0)
results[["c_0"]] <- CFmeansForDecileBinsRF(fault_binerrs_c_0_treat_df, "Y", "c_0")
fault_binerrs_k_90_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_90=fault_binerrs_all$k_90)
results[["k_90"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_90_treat_df, "Y", "k_90")
fault_binerrs_k_93_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_93=fault_binerrs_all$k_93, k_93=fault_binerrs_all$k_93, k_94=fault_binerrs_all$k_94)
results[["k_93"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_93_treat_df, "Y", "k_93")
fault_binerrs_k_94_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_94=fault_binerrs_all$k_94)
results[["k_94"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_94_treat_df, "Y", "k_94")
fault_binerrs_k_91_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_91=fault_binerrs_all$k_91, k_89=fault_binerrs_all$k_89, k_90=fault_binerrs_all$k_90)
results[["k_91"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_91_treat_df, "Y", "k_91")
fault_binerrs_k_92_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_92=fault_binerrs_all$k_92, k_88=fault_binerrs_all$k_88)
results[["k_92"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_92_treat_df, "Y", "k_92")
fault_binerrs_k_86_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_86=fault_binerrs_all$k_86, k_84=fault_binerrs_all$k_84, k_84=fault_binerrs_all$k_84, k_85=fault_binerrs_all$k_85)
results[["k_86"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_86_treat_df, "Y", "k_86")
fault_binerrs_k_87_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_87=fault_binerrs_all$k_87, k_80=fault_binerrs_all$k_80, k_86=fault_binerrs_all$k_86)
results[["k_87"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_87_treat_df, "Y", "k_87")
fault_binerrs_k_84_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_84=fault_binerrs_all$k_84, k_83=fault_binerrs_all$k_83)
results[["k_84"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_84_treat_df, "Y", "k_84")
fault_binerrs_k_85_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_85=fault_binerrs_all$k_85, ks_10=fault_binerrs_all$ks_10)
results[["k_85"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_85_treat_df, "Y", "k_85")
fault_binerrs_nct_8_treat_df <- data.frame(Y=fault_binerrs_all$Y, nct_8=fault_binerrs_all$nct_8, nct_7=fault_binerrs_all$nct_7)
results[["nct_8"]] <- CFmeansForDecileBinsRF(fault_binerrs_nct_8_treat_df, "Y", "nct_8")
fault_binerrs_nct_9_treat_df <- data.frame(Y=fault_binerrs_all$Y, nct_9=fault_binerrs_all$nct_9, nct_8=fault_binerrs_all$nct_8)
results[["nct_9"]] <- CFmeansForDecileBinsRF(fault_binerrs_nct_9_treat_df, "Y", "nct_9")
fault_binerrs_k_88_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_88=fault_binerrs_all$k_88, k_87=fault_binerrs_all$k_87)
results[["k_88"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_88_treat_df, "Y", "k_88")
fault_binerrs_k_89_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_89=fault_binerrs_all$k_89, k_89=fault_binerrs_all$k_89, k_90=fault_binerrs_all$k_90)
results[["k_89"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_89_treat_df, "Y", "k_89")
fault_binerrs_nct_4_treat_df <- data.frame(Y=fault_binerrs_all$Y, nct_4=fault_binerrs_all$nct_4, nct_2=fault_binerrs_all$nct_2, nct_3=fault_binerrs_all$nct_3)
results[["nct_4"]] <- CFmeansForDecileBinsRF(fault_binerrs_nct_4_treat_df, "Y", "nct_4")
fault_binerrs_nct_5_treat_df <- data.frame(Y=fault_binerrs_all$Y, nct_5=fault_binerrs_all$nct_5, nct_4=fault_binerrs_all$nct_4)
results[["nct_5"]] <- CFmeansForDecileBinsRF(fault_binerrs_nct_5_treat_df, "Y", "nct_5")
fault_binerrs_nct_6_treat_df <- data.frame(Y=fault_binerrs_all$Y, nct_6=fault_binerrs_all$nct_6, nct_1=fault_binerrs_all$nct_1, nct_5=fault_binerrs_all$nct_5)
results[["nct_6"]] <- CFmeansForDecileBinsRF(fault_binerrs_nct_6_treat_df, "Y", "nct_6")
fault_binerrs_nct_7_treat_df <- data.frame(Y=fault_binerrs_all$Y, nct_7=fault_binerrs_all$nct_7, nct_6=fault_binerrs_all$nct_6)
results[["nct_7"]] <- CFmeansForDecileBinsRF(fault_binerrs_nct_7_treat_df, "Y", "nct_7")
fault_binerrs_nct_0_treat_df <- data.frame(Y=fault_binerrs_all$Y, nct_0=fault_binerrs_all$nct_0)
results[["nct_0"]] <- CFmeansForDecileBinsRF(fault_binerrs_nct_0_treat_df, "Y", "nct_0")
fault_binerrs_nct_1_treat_df <- data.frame(Y=fault_binerrs_all$Y, nct_1=fault_binerrs_all$nct_1, nct_1=fault_binerrs_all$nct_1, nct_5=fault_binerrs_all$nct_5)
results[["nct_1"]] <- CFmeansForDecileBinsRF(fault_binerrs_nct_1_treat_df, "Y", "nct_1")
fault_binerrs_nct_2_treat_df <- data.frame(Y=fault_binerrs_all$Y, nct_2=fault_binerrs_all$nct_2, nct_2=fault_binerrs_all$nct_2, nct_3=fault_binerrs_all$nct_3)
results[["nct_2"]] <- CFmeansForDecileBinsRF(fault_binerrs_nct_2_treat_df, "Y", "nct_2")
fault_binerrs_nct_3_treat_df <- data.frame(Y=fault_binerrs_all$Y, nct_3=fault_binerrs_all$nct_3)
results[["nct_3"]] <- CFmeansForDecileBinsRF(fault_binerrs_nct_3_treat_df, "Y", "nct_3")
fault_binerrs_sn_1_treat_df <- data.frame(Y=fault_binerrs_all$Y, sn_1=fault_binerrs_all$sn_1, t_19=fault_binerrs_all$t_19)
results[["sn_1"]] <- CFmeansForDecileBinsRF(fault_binerrs_sn_1_treat_df, "Y", "sn_1")
fault_binerrs_sn_0_treat_df <- data.frame(Y=fault_binerrs_all$Y, sn_0=fault_binerrs_all$sn_0, t_15=fault_binerrs_all$t_15)
results[["sn_0"]] <- CFmeansForDecileBinsRF(fault_binerrs_sn_0_treat_df, "Y", "sn_0")
fault_binerrs_sn_3_treat_df <- data.frame(Y=fault_binerrs_all$Y, sn_3=fault_binerrs_all$sn_3, g_1=fault_binerrs_all$g_1, t_27=fault_binerrs_all$t_27)
results[["sn_3"]] <- CFmeansForDecileBinsRF(fault_binerrs_sn_3_treat_df, "Y", "sn_3")
fault_binerrs_sn_2_treat_df <- data.frame(Y=fault_binerrs_all$Y, sn_2=fault_binerrs_all$sn_2, t_23=fault_binerrs_all$t_23)
results[["sn_2"]] <- CFmeansForDecileBinsRF(fault_binerrs_sn_2_treat_df, "Y", "sn_2")
fault_binerrs_k_82_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_82=fault_binerrs_all$k_82)
results[["k_82"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_82_treat_df, "Y", "k_82")
fault_binerrs_k_83_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_83=fault_binerrs_all$k_83, k_81=fault_binerrs_all$k_81, k_82=fault_binerrs_all$k_82)
results[["k_83"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_83_treat_df, "Y", "k_83")
fault_binerrs_k_80_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_80=fault_binerrs_all$k_80, k_79=fault_binerrs_all$k_79)
results[["k_80"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_80_treat_df, "Y", "k_80")
fault_binerrs_k_81_treat_df <- data.frame(Y=fault_binerrs_all$Y, k_81=fault_binerrs_all$k_81, k_81=fault_binerrs_all$k_81, k_82=fault_binerrs_all$k_82)
results[["k_81"]] <- CFmeansForDecileBinsRF(fault_binerrs_k_81_treat_df, "Y", "k_81")
fault_binerrs_nu_3_treat_df <- data.frame(Y=fault_binerrs_all$Y, nu_3=fault_binerrs_all$nu_3, nu_2=fault_binerrs_all$nu_2, nu_1=fault_binerrs_all$nu_1)
results[["nu_3"]] <- CFmeansForDecileBinsRF(fault_binerrs_nu_3_treat_df, "Y", "nu_3")
fault_binerrs_nu_2_treat_df <- data.frame(Y=fault_binerrs_all$Y, nu_2=fault_binerrs_all$nu_2)
results[["nu_2"]] <- CFmeansForDecileBinsRF(fault_binerrs_nu_2_treat_df, "Y", "nu_2")
fault_binerrs_nu_1_treat_df <- data.frame(Y=fault_binerrs_all$Y, nu_1=fault_binerrs_all$nu_1, nu_1=fault_binerrs_all$nu_1, nu_3=fault_binerrs_all$nu_3)
results[["nu_1"]] <- CFmeansForDecileBinsRF(fault_binerrs_nu_1_treat_df, "Y", "nu_1")
fault_binerrs_nu_0_treat_df <- data.frame(Y=fault_binerrs_all$Y, nu_0=fault_binerrs_all$nu_0)
results[["nu_0"]] <- CFmeansForDecileBinsRF(fault_binerrs_nu_0_treat_df, "Y", "nu_0")
fault_binerrs_nu_7_treat_df <- data.frame(Y=fault_binerrs_all$Y, nu_7=fault_binerrs_all$nu_7, nu_6=fault_binerrs_all$nu_6, nu_5=fault_binerrs_all$nu_5)
results[["nu_7"]] <- CFmeansForDecileBinsRF(fault_binerrs_nu_7_treat_df, "Y", "nu_7")
fault_binerrs_nu_6_treat_df <- data.frame(Y=fault_binerrs_all$Y, nu_6=fault_binerrs_all$nu_6)
results[["nu_6"]] <- CFmeansForDecileBinsRF(fault_binerrs_nu_6_treat_df, "Y", "nu_6")
fault_binerrs_nu_5_treat_df <- data.frame(Y=fault_binerrs_all$Y, nu_5=fault_binerrs_all$nu_5, nu_5=fault_binerrs_all$nu_5, nu_7=fault_binerrs_all$nu_7)
results[["nu_5"]] <- CFmeansForDecileBinsRF(fault_binerrs_nu_5_treat_df, "Y", "nu_5")
fault_binerrs_nu_4_treat_df <- data.frame(Y=fault_binerrs_all$Y, nu_4=fault_binerrs_all$nu_4, nu_1=fault_binerrs_all$nu_1, nu_3=fault_binerrs_all$nu_3)
results[["nu_4"]] <- CFmeansForDecileBinsRF(fault_binerrs_nu_4_treat_df, "Y", "nu_4")
fault_binerrs_b_0_treat_df <- data.frame(Y=fault_binerrs_all$Y, b_0=fault_binerrs_all$b_0, spm1_0=fault_binerrs_all$spm1_0, sp_0=fault_binerrs_all$sp_0, spm1_0=fault_binerrs_all$spm1_0, sp_0=fault_binerrs_all$sp_0, epm1_0=fault_binerrs_all$epm1_0, epm1_0=fault_binerrs_all$epm1_0)
results[["b_0"]] <- CFmeansForDecileBinsRF(fault_binerrs_b_0_treat_df, "Y", "b_0")
fault_binerrs_b_2_treat_df <- data.frame(Y=fault_binerrs_all$Y, b_2=fault_binerrs_all$b_2, b_1=fault_binerrs_all$b_1)
results[["b_2"]] <- CFmeansForDecileBinsRF(fault_binerrs_b_2_treat_df, "Y", "b_2")
fault_binerrs_b_1_treat_df <- data.frame(Y=fault_binerrs_all$Y, b_1=fault_binerrs_all$b_1, b_0=fault_binerrs_all$b_0)
results[["b_1"]] <- CFmeansForDecileBinsRF(fault_binerrs_b_1_treat_df, "Y", "b_1")
fault_binerrs_b_3_treat_df <- data.frame(Y=fault_binerrs_all$Y, b_3=fault_binerrs_all$b_3, b_2=fault_binerrs_all$b_2, b_1=fault_binerrs_all$b_1)
results[["b_3"]] <- CFmeansForDecileBinsRF(fault_binerrs_b_3_treat_df, "Y", "b_3")
fault_binerrs_scale_0_treat_df <- data.frame(Y=fault_binerrs_all$Y, scale_0=fault_binerrs_all$scale_0, p_8=fault_binerrs_all$p_8, p_8=fault_binerrs_all$p_8, p_8=fault_binerrs_all$p_8, k_88=fault_binerrs_all$k_88, k_88=fault_binerrs_all$k_88)
results[["scale_0"]] <- CFmeansForDecileBinsRF(fault_binerrs_scale_0_treat_df, "Y", "scale_0")
fault_binerrs_r_0_treat_df <- data.frame(Y=fault_binerrs_all$Y, r_0=fault_binerrs_all$r_0, r_0=fault_binerrs_all$r_0, r_2=fault_binerrs_all$r_2)
results[["r_0"]] <- CFmeansForDecileBinsRF(fault_binerrs_r_0_treat_df, "Y", "r_0")
fault_binerrs_r_2_treat_df <- data.frame(Y=fault_binerrs_all$Y, r_2=fault_binerrs_all$r_2, r_1=fault_binerrs_all$r_1, r_0=fault_binerrs_all$r_0)
results[["r_2"]] <- CFmeansForDecileBinsRF(fault_binerrs_r_2_treat_df, "Y", "r_2")
fault_binerrs_r_1_treat_df <- data.frame(Y=fault_binerrs_all$Y, r_1=fault_binerrs_all$r_1)
results[["r_1"]] <- CFmeansForDecileBinsRF(fault_binerrs_r_1_treat_df, "Y", "r_1")
fault_binerrs_r_3_treat_df <- data.frame(Y=fault_binerrs_all$Y, r_3=fault_binerrs_all$r_3, r_0=fault_binerrs_all$r_0, r_2=fault_binerrs_all$r_2)
results[["r_3"]] <- CFmeansForDecileBinsRF(fault_binerrs_r_3_treat_df, "Y", "r_3")
fault_binerrs_wantv_14_treat_df <- data.frame(Y=fault_binerrs_all$Y, wantv_14=fault_binerrs_all$wantv_14, wantv_6=fault_binerrs_all$wantv_6, wantv_13=fault_binerrs_all$wantv_13)
results[["wantv_14"]] <- CFmeansForDecileBinsRF(fault_binerrs_wantv_14_treat_df, "Y", "wantv_14")
fault_binerrs_wantv_13_treat_df <- data.frame(Y=fault_binerrs_all$Y, wantv_13=fault_binerrs_all$wantv_13, wantv_8=fault_binerrs_all$wantv_8, wantv_12=fault_binerrs_all$wantv_12, wantv_6=fault_binerrs_all$wantv_6)
results[["wantv_13"]] <- CFmeansForDecileBinsRF(fault_binerrs_wantv_13_treat_df, "Y", "wantv_13")
fault_binerrs_wantv_12_treat_df <- data.frame(Y=fault_binerrs_all$Y, wantv_12=fault_binerrs_all$wantv_12, wantv_10=fault_binerrs_all$wantv_10, wantv_11=fault_binerrs_all$wantv_11)
results[["wantv_12"]] <- CFmeansForDecileBinsRF(fault_binerrs_wantv_12_treat_df, "Y", "wantv_12")
fault_binerrs_Arg_0_treat_df <- data.frame(Y=fault_binerrs_all$Y, Arg_0=fault_binerrs_all$Arg_0)
results[["Arg_0"]] <- CFmeansForDecileBinsRF(fault_binerrs_Arg_0_treat_df, "Y", "Arg_0")
fault_binerrs_wantv_11_treat_df <- data.frame(Y=fault_binerrs_all$Y, wantv_11=fault_binerrs_all$wantv_11)
results[["wantv_11"]] <- CFmeansForDecileBinsRF(fault_binerrs_wantv_11_treat_df, "Y", "wantv_11")
fault_binerrs_wantv_10_treat_df <- data.frame(Y=fault_binerrs_all$Y, wantv_10=fault_binerrs_all$wantv_10, wantv_10=fault_binerrs_all$wantv_10, wantv_11=fault_binerrs_all$wantv_11)
results[["wantv_10"]] <- CFmeansForDecileBinsRF(fault_binerrs_wantv_10_treat_df, "Y", "wantv_10")
fault_binerrs_nu_9_treat_df <- data.frame(Y=fault_binerrs_all$Y, nu_9=fault_binerrs_all$nu_9, nu_8=fault_binerrs_all$nu_8, nu_5=fault_binerrs_all$nu_5)
results[["nu_9"]] <- CFmeansForDecileBinsRF(fault_binerrs_nu_9_treat_df, "Y", "nu_9")
fault_binerrs_nu_8_treat_df <- data.frame(Y=fault_binerrs_all$Y, nu_8=fault_binerrs_all$nu_8, nu_5=fault_binerrs_all$nu_5, nu_7=fault_binerrs_all$nu_7)
results[["nu_8"]] <- CFmeansForDecileBinsRF(fault_binerrs_nu_8_treat_df, "Y", "nu_8")
fault_binerrs_kase_2_treat_df <- data.frame(Y=fault_binerrs_all$Y, kase_2=fault_binerrs_all$kase_2)
results[["kase_2"]] <- CFmeansForDecileBinsRF(fault_binerrs_kase_2_treat_df, "Y", "kase_2")
fault_binerrs_kase_1_treat_df <- data.frame(Y=fault_binerrs_all$Y, kase_1=fault_binerrs_all$kase_1)
results[["kase_1"]] <- CFmeansForDecileBinsRF(fault_binerrs_kase_1_treat_df, "Y", "kase_1")
fault_binerrs_kase_0_treat_df <- data.frame(Y=fault_binerrs_all$Y, kase_0=fault_binerrs_all$kase_0)
results[["kase_0"]] <- CFmeansForDecileBinsRF(fault_binerrs_kase_0_treat_df, "Y", "kase_0")
fault_binerrs_kase_6_treat_df <- data.frame(Y=fault_binerrs_all$Y, kase_6=fault_binerrs_all$kase_6, kase_1=fault_binerrs_all$kase_1, kase_5=fault_binerrs_all$kase_5)
results[["kase_6"]] <- CFmeansForDecileBinsRF(fault_binerrs_kase_6_treat_df, "Y", "kase_6")
fault_binerrs_kase_5_treat_df <- data.frame(Y=fault_binerrs_all$Y, kase_5=fault_binerrs_all$kase_5, kase_2=fault_binerrs_all$kase_2, kase_3=fault_binerrs_all$kase_3, kase_4=fault_binerrs_all$kase_4)
results[["kase_5"]] <- CFmeansForDecileBinsRF(fault_binerrs_kase_5_treat_df, "Y", "kase_5")
fault_binerrs_kase_4_treat_df <- data.frame(Y=fault_binerrs_all$Y, kase_4=fault_binerrs_all$kase_4)
results[["kase_4"]] <- CFmeansForDecileBinsRF(fault_binerrs_kase_4_treat_df, "Y", "kase_4")
fault_binerrs_kase_3_treat_df <- data.frame(Y=fault_binerrs_all$Y, kase_3=fault_binerrs_all$kase_3)
results[["kase_3"]] <- CFmeansForDecileBinsRF(fault_binerrs_kase_3_treat_df, "Y", "kase_3")
return(results)
}
# 3 RF
predCFoutRF <- function(dataFrame, outVarName, treatVarName, treatVal) {
library("ranger");
forest <- ranger(paste(outVarName, " ~ .", sep = ""), data = dataFrame);
CFdata <- data.frame(dataFrame);
CFdata[[treatVarName]] <- rep(treatVal, length(CFdata[[treatVarName]]));
CFout <- predictions(predict(forest, CFdata))
summary(forest)
return(CFout);
}
# 3 LM
predCFoutLM <- function(dataFrame, outVarName, treatVarName,  treatVal) {
M <- lm(paste(outVarName, " ~ .", sep=""), data=dataFrame);
CFdata <- data.frame(dataFrame);
CFdata[[treatVarName]] <- rep(treatVal, length(CFdata[[treatVarName]]));
CFout <- predict(M, CFdata);
return(CFout);
}
# 3 predict with lasso
predCFoutLM <- function(dataFrame, outVarName, treatVarName,  treatVal) {
library(glmnet)
# newoutput <- apply(newoutput, 2, as.numeric)
# Y <- apply(Y, 2, as.numeric)
fit.glmnet <- cv.glmnet(x=data.matrix(dataFrame[,-1]), data.matrix(dataFrame[,1]), family = "gaussian")
CFdata <- data.frame(dataFrame);
CFdata[[treatVarName]] <- rep(treatVal, length(CFdata[[treatVarName]]));
# CFdata <- apply(CFdata, 2, as.numeric)
CFout <- predict(fit.glmnet, newx = data.matrix(CFdata[,-1]), s="lambda.min", type='response');
# return(CFout);
}
predCFprobRF <- function(dataFrame, outVarName, treatVarName, treatVal) {
library("ranger");
forest <- ranger(paste(outVarName, " ~ .", sep=""), data=dataFrame, probability=TRUE);
CFdata <- data.frame(dataFrame);
CFdata[[treatVarName]] <- rep(treatVal, length(CFdata[[treatVarName]]));
CFout <- predictions(predict(forest, data=CFdata))
return(CFout[, 2])
}
# 0
trainCFoutPredRF <- function(dataFrame, outVarName) {
library("ranger");
forest <- ranger(paste(outVarName, " ~ .", sep=""), data=dataFrame);
return(forest);
}
trainCFprobPredRF <- function(dataFrame, outVarName) {
library("ranger");
forest <- ranger(paste(outVarName, " ~ .", sep=""), data=dataFrame, probability=TRUE);
return(forest);
}
CFmeansForTreatRangeRF <- function(dataFrame, outVarName, treatVarName, treatVec, minTreat, maxTreat) {
CFmeans <- rep(0, maxTreat - minTreat + 1);
for (i in minTreat:maxTreat){
CFmeans[i] <- mean(predCFoutRF(dataFrame, outVarName, treatVarName, treatVec[i]));
}
return(CFmeans);
}
# 2 RF
CFmeansForTreatVecRF <- function(dataFrame, outVarName, treatVarName, treatVec) {
CFmeans <- rep(0, length(treatVec));
for (i in 1:length(treatVec)) {
CFmeans[i] <- mean(predCFoutRF(dataFrame, outVarName, treatVarName, treatVec[i]));
}
return(CFmeans);
}
# 2 LM
CFmeansForTreatVecLM <- function(dataFrame, outVarName, treatVarName, treatVec) {
CFmeans <- rep(0, length(treatVec));
for (i in 1:length(treatVec)) {
CFmeans[i] <- mean(predCFoutLM(dataFrame, outVarName, treatVarName, treatVec[i]));
}
return(CFmeans);
}
CFprobsForTreatVecRF <- function(dataFrame, outVarName, treatVarName, treatVec) {
CFprobs <- rep(0, length(treatVec));
for (i in 1:length(treatVec)) {
CFprobs[i] <- mean(predCFprobRF(dataFrame, outVarName, treatVarName, treatVec[i]));
}
return(CFprobs);
}
# 1 RF
CFmeansForDecileBinsRF <- function(dataFrame, outVarName, treatVarName) {
fivePercentQuantiles <- quantile(dataFrame[[treatVarName]], prob = seq(0, 1, length = 21), type = 5, na.rm = TRUE)
# Define the bins
evenQuantiles <- fivePercentQuantiles[seq(2, 20, by = 2)] # 10 bins
dataFrame <- do.call(data.frame,lapply(dataFrame, function(x) replace(x, is.infinite(x),NA)))
# remove NaN and NA
dataFrame <- dataFrame[complete.cases(dataFrame),]
return(CFmeansForTreatVecRF(dataFrame, outVarName, treatVarName, evenQuantiles))
}
#1 LM for Lasso
CFmeansForDecileBinsLM <- function(dataFrame, outVarName, treatVarName) {
fivePercentQuantiles <- quantile(dataFrame[[treatVarName]], prob = seq(0, 1, length = 21), type = 5, na.rm = TRUE)
evenQuantiles <- fivePercentQuantiles[seq(2, 20, by=2)]
# replace Inf with NA
dataFrame <- do.call(data.frame,lapply(dataFrame, function(x) replace(x, is.infinite(x),NA)))
# remove NaN and NA
dataFrame <- dataFrame[complete.cases(dataFrame),]
if ((nrow(dataFrame) == 0 )|| (mean(dataFrame$Y) == 0)){
return (-1)
}
else{
vec <- dataFrame[c(treatVarName)]
medianValue <- median(vec[,1])
count <- 0
for (i in 1:nrow(dataFrame[c(treatVarName)])){
temp <- vec[i,]
if(temp == medianValue){
count <- count + 1
}
}
if(count < nrow(dataFrame[c(treatVarName)]) - 3){
return(CFmeansForTreatVecLM(dataFrame, outVarName, treatVarName, evenQuantiles))
}else{
return(-1)
}
}
}
# 1 LM
CFmeansForDecileBinsLM <- function(dataFrame, outVarName, treatVarName) {
fivePercentQuantiles <- quantile(dataFrame[[treatVarName]], prob = seq(0, 1, length = 21), type = 5, na.rm = TRUE)
evenQuantiles <- fivePercentQuantiles[seq(2, 20, by=2)]
return(CFmeansForTreatVecLM(dataFrame, outVarName, treatVarName, evenQuantiles))
}
CFprobsForDecileBinsRF <- function(dataFrame, outVarName, treatVarName) {
fivePercentQuantiles <- quantile(dataFrame[[treatVarName]], prob = seq(0, 1, length = 21), type = 5)
evenQuantiles <- fivePercentQuantiles[seq(2, 20, by=2)]
return(CFprobsForTreatVecRF(dataFrame, outVarName, treatVarName, evenQuantiles))
}
maxContrast <- function(CFMeanVec) {
maxCon <- 0
index1 <- -1
index2 <- -1
for (i in 1:(length(CFMeanVec) - 1)) {
for (j in (i + 1):length(CFMeanVec)) {
if ((CFMeanVec[i] - CFMeanVec[j]) > maxCon) {
maxCon <- CFMeanVec[i] - CFMeanVec[j]
index1 <- i
index2 <- j
}
else if ((CFMeanVec[j] - CFMeanVec[i]) > maxCon) {
maxCon <- CFMeanVec[j] - CFMeanVec[i]
index1 <- j
index2 <- i
}
}
}
return(c(maxCon, index1, index2))
}
normalize <- function(x) {
# From https://stats.stackexchange.com/questions/70801/how-to-normalize-data-to-0-1-range
x <- as.matrix(x)
minAttr=apply(x, 2, min)
maxAttr=apply(x, 2, max)
x <- sweep(x, 2, minAttr, FUN="-")
x=sweep(x, 2,  maxAttr-minAttr, "/")
attr(x, 'normalized:min') = minAttr
attr(x, 'normalized:max') = maxAttr
return (x)
}
# Subject functions
goodFactor <- function(n) {
d <- 2;
factors <- list();
i = 0;
while (n > 1) {
if (n %% d == 0) {
i = i + 1;
factors[[i]] <- d;
n = n / d;
}
else {
d = d + 1;
}
}
return(factors);
}
goodProg <- function(x, y, z) {
r <- 0;
if (x > 0) {
r <- 1;
if (y > 0) {
r <- 2;
if (z > 0) {
r <- 3;
} else {
r <- -3;
}
} else {
r <- -2;
}
} else {
r <- -1;
}
return(r);
}
badProg <- function(x, y, z) {
r <- 0;
if (x > 0) {
r <- 1;
if (y > 0) {
r <- 2;
if (z >= 0) {
r <- 3;
} else {
r <- -3;
}
} else {
r <- -2;
}
} else {
r <- -1;
}
return(r);
}
# goodGCD <- function(p, q) {
#   while (q != 0) {
#     temp <- q;
#     q <- p %% q;
#     p <- temp;
#   }
#   return(p);
# }
# badGCD <- function(p, q) {
#   while (q != 0) {
#     temp <- q;
#     q <- p %% ifelse(q == 5, 4, q);
#     p <- temp;
#   }
#   return(p);
# }
compute <- function(dataframe){
headers <- names(dataframe)
result <- c(1, 1, 1)
for(i in 1 : length(dataframe)){
currentVec <- dataframe[,i]
vec <- maxContrast(currentVec)
result <- data.frame(result, vec)
}
result[,1] <- NULL
names(result) <- headers
return(result)
}
getTheBiggest <- function(dataframe){
# return (names(dataframe)[order(-dataframe[1,])])
return (dataframe[order(-dataframe[1,])])
}
ditch <- function(x){
temp <- as.matrix(x)
for (i in temp){
if (i == "NaN"){
print(i)
i <- 0
}
if (i == "Inf"){
print(i)
}
}
y <- as.matrix(temp)
print(y)
# ifelse(is.infinite(x), 2147483647, x)
}
computeESP <- function(S_p_obs, F_p_obs, NumF, dataFrame){
S_p <- nrow(subset(dataFrame, Y == 0))
F_p <- nrow(subset(dataFrame, Y == 1))
sensitivity <- log(F_p)/log(NumF)
increase_p <- F_p/(S_p + F_p) - F_p_obs/(S_p_obs + F_p_obs)
importance_p <- 2/((1/increase_p) + 1/(log(F_p)/log(NumF)))
return(importance_p)
}
CFmeansForESP <- function(dataFrame, outVarName, treatVarName){
NumF <- nrow(subset(dataFrame, Y == 1))
# print("NumF")
# print(NumF)
# replace Inf with NA
dataFrame <- do.call(data.frame,lapply(dataFrame, function(x) replace(x, is.infinite(x),NA)))
# remove NaN and NA
dataFrame <- dataFrame[complete.cases(dataFrame),]
if (nrow(dataFrame) == 0){
return(-1)
}else{
elastic <- data.frame(importance = c(0,0,0,0,0,0,0,0,0))
vec <- dataFrame[c(treatVarName)]
mu <- mean(vec[,1])
tau <- sd(vec[,1])
S_p_obs <- nrow(subset(dataFrame, Y == 0))
# print("S_p_obs")
# print(S_p_obs)
F_p_obs <- nrow(subset(dataFrame, Y == 1))
# print("F_p_obs")
# print(F_p_obs)
elastic[1,1] <- computeESP(S_p_obs, F_p_obs, NumF, subset(dataFrame, eval(as.name(treatVarName)) < mu - 3 * tau))
elastic[2,1] <- computeESP(S_p_obs, F_p_obs, NumF, subset(dataFrame, eval(as.name(treatVarName)) >= mu - 3 * tau & eval(as.name(treatVarName)) < mu - 2 * tau))
elastic[3,1] <- computeESP(S_p_obs, F_p_obs, NumF, subset(dataFrame, eval(as.name(treatVarName)) >= mu - 2 * tau & eval(as.name(treatVarName)) < mu - tau))
elastic[4,1] <- computeESP(S_p_obs, F_p_obs, NumF, subset(dataFrame, eval(as.name(treatVarName)) >= mu - tau &  eval(as.name(treatVarName)) < mu))
elastic[5,1] <- computeESP(S_p_obs, F_p_obs, NumF, subset(dataFrame, eval(as.name(treatVarName)) == mu))
elastic[6,1] <- computeESP(S_p_obs, F_p_obs, NumF, subset(dataFrame, eval(as.name(treatVarName)) > mu & eval(as.name(treatVarName)) <= mu + tau))
elastic[7,1] <- computeESP(S_p_obs, F_p_obs, NumF, subset(dataFrame, eval(as.name(treatVarName)) > mu + tau & eval(as.name(treatVarName)) <= mu + 2 * tau))
elastic[8,1] <- computeESP(S_p_obs, F_p_obs, NumF, subset(dataFrame, eval(as.name(treatVarName)) > mu + 2 * tau & eval(as.name(treatVarName)) <= mu + 3 * tau))
elastic[9,1] <- computeESP(S_p_obs, F_p_obs, NumF, subset(dataFrame, eval(as.name(treatVarName)) > mu + 3 * tau))
elastic <- data.frame(elastic[complete.cases(elastic),])
# print(elastic)
maxValue <- sort(elastic[,1])[length(elastic[,1])]
# print(maxValue)
return (maxValue)
}
}
is.nan.data.frame <- function(x){
do.call(cbind, lapply(x, is.nan))
}
is.infinite.data.frame <- function(x){
do.call(cbind, lapply(x, is.infinite))
}
#newoutput2 <- data.frame(t(newoutput))
#colnames(newoutput2) <- newoutput2[1,]
# =============================
# Start
# input: newoutput, outY
newoutput <- read.table("newoutput.txt", quote = "\"", comment.char = "")
outY <- read.table("outY.txt", quote="\"", comment.char="")
# =============================
newoutput <- data.frame(newoutput)
rownames(newoutput) <- newoutput[,1]
newoutput <- newoutput[,-1]
newoutput <- as.data.frame(t(newoutput))
Y <- data.frame(t(outY[,-1]))
names(Y) <- c("Y")
fault_binerrs_all <- data.frame(Y, newoutput)
#fault_binerrs_all <- do.call(data.frame,lapply(fault_binerrs_all, function(x) replace(x, is.infinite(x),NA)))
#fault_binerrs_all <- fault_binerrs_all[ , colSums(is.na(fault_binerrs_all)) == 0]
# trainCFoutPredRF(TestShimple_fault_binerrs_all, "Y")
for (i in seq(1,10,1)){
CFmeanResult <- genCFmeansRF_fault_binerrs()
# for esp
# result <- CFmeanResult
# for RF
maxContrastDF <- compute(CFmeanResult)
result <- getTheBiggest(maxContrastDF)
if (i == 1){
meanResult <- result[1,]
}
else{
# rbind with each result, run FOR 10 TIMES
meanResult <- rbind(meanResult, result[1,])
}
}
# make a copy of meanResult
meanResultCopy <- meanResult
# sort by the mean Y
resultForPlot <- rbind(meanResult, colMeans(meanResult))
resultForPlot <- resultForPlot[order(resultForPlot[9,], decreasing = T)]
resultForPlot <- resultForPlot[-nrow(resultForPlot),]
# only cares about the top 10 variable in the rank
resultForPlot <- resultForPlot[,1:10]
boxplot(resultForPlot, las = 2)
resultForPlot <- rbind(resultForPlot, colMeans(resultForPlot))
write.csv(resultForPlot, file = "result.csv")
write.csv(meanResult, file = "result_secMin_2_p0.75_100tests.csv")
# initialize meanReslt, only run AT THE FIRST TIME
meanResult <- result[1,]
